generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://postgres:27102003@localhost:5432/jewelry"
}

model User {
  id         String    @id @default(uuid())
  email      String    @unique
  password   String
  username   String?
  roleId     Int
  role       Role      @relation(fields: [roleId], references: [id], onDelete: Cascade)
  isVerified Boolean
  tokenOTP   String?
  blogs      Blog[]    @relation("user_blogs")
  comments   Comment[] @relation("user_comments")
  profile    Profile?  @relation("user_profile")
  token      Token?    @relation("user_token")
}

model Role {
  id        Int         @id @default(autoincrement())
  code      String      @unique
  name      String
  createdAt DateTime?   @default(now())
  updatedAt DateTime?   @updatedAt
  isActive  Boolean     @default(true)
  users     User[]
  createdBy String?
  updatedBy String?
  RoleRight RoleRight[]
}

model Right {
  id          Int           @id @default(autoincrement())
  code        String?       @db.VarChar(10)
  name        String?       @db.VarChar(10)
  createdDate DateTime?     @default(now())
  createdBy   String?       @db.VarChar(50)
  updatedDate DateTime?
  updatedBy   String?       @db.VarChar(50)
  isActive    Boolean       @default(true)
  RoleRight   RoleRight[]
  RightObject RightObject[]
}

model RoleRight {
  id          Int       @id @default(autoincrement())
  roleId      Int
  rightId     Int
  createdDate DateTime? @default(now())
  createdBy   String?   @db.VarChar(50)
  updatedDate DateTime?
  updatedBy   String?   @db.VarChar(50)
  isActive    Boolean   @default(true)

  role  Role  @relation(fields: [roleId], references: [id], onDelete: Cascade)
  right Right @relation(fields: [rightId], references: [id], onDelete: Cascade)
}

model Token {
  id               Int      @id @default(autoincrement())
  refreshTokenUsed String[]
  refreshToken     String
  accessToken      String
  userId           String   @unique
  user             User     @relation("user_token", fields: [userId], references: [id], onDelete: Cascade)
}

model Object {
  id          Int           @id @default(autoincrement())
  code        String?       @unique @db.VarChar(10)
  name        String?       @db.VarChar(10)
  createdDate DateTime?     @default(now())
  createdBy   String?       @db.VarChar(50)
  updatedDate DateTime?
  updatedBy   String?       @db.VarChar(50)
  isActive    Boolean       @default(true)
  RightObject RightObject[]
}

model RightObject {
  id          Int       @id @default(autoincrement())
  rightId     Int
  objectId    Int
  createYn    Boolean   @default(false)
  readYn      Boolean   @default(true)
  updateYn    Boolean   @default(false)
  deleteYn    Boolean   @default(false)
  executeYn   Boolean   @default(true)
  createdDate DateTime? @default(now())
  createdBy   String?   @db.VarChar(50)
  updatedDate DateTime?
  updatedBy   String?   @db.VarChar(50)
  isActive    Boolean   @default(true)

  // Quan hệ với bảng Right
  right Right @relation(fields: [rightId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  // Quan hệ với bảng TObject
  object Object @relation(fields: [objectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model Profile {
  id          Int       @id @default(autoincrement())
  firstName   String?
  lastName    String?
  phoneNumber String?
  isActive    Boolean   @default(true)
  createAt    DateTime? @default(now())
  updatedAt   DateTime? @updatedAt
  userId      String    @unique
  socialMedia String?
  user        User      @relation("user_profile", fields: [userId], references: [id], onDelete: Cascade)
}

model Blog {
  id        Int               @id @default(autoincrement())
  title     String
  content   String
  status    Status            @default(PENDING_APPROVAL)
  createAt  DateTime?         @default(now())
  updatedAt DateTime?         @updatedAt
  authorId  String
  author    User              @relation("user_blogs", fields: [authorId], references: [id], onDelete: Cascade)
  comments  CommentsOnBlogs[] @relation("blog_comment")
}

model Comment {
  id       Int               @id @default(autoincrement())
  parentId Int
  content  String
  createAt DateTime?         @default(now())
  authorId String
  author   User              @relation("user_comments", fields: [authorId], references: [id], onDelete: Cascade)
  blogs    CommentsOnBlogs[]
}

model CommentsOnBlogs {
  blogId    Int
  commentId Int
  blog      Blog    @relation("blog_comment", fields: [blogId], references: [id], onDelete: Cascade)
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@id([blogId, commentId])
}

enum Status {
  PENDING_APPROVAL
  APPROVED
  PENDING_DELETION
  DELETED
  ALL
}
